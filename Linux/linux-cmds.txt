
-- always good to start with basics
1. ls -> listing
2. ls -t 
3. ls -R it will list all the sub directories also
    root@DESKTOP-BA3EH26:~/git-works# ls -R

    ./Linux:
     linux-cmds.txt

    ./python:
    function.py  sample.py

4. ls -F --> ls -F (Append file type indicators)
for example
      root@DESKTOP-BA3EH26:~/git-works# ls -F
      Linux/  README.md  python/  sql-notes.sql*
      / --> dir, *--> excutable, 

5. To list all directories and subdirectories under /
   
   ls -R or ls -lrthR

--------------------------------------------------------------
------------grep-------------
-We know grep is for text filtering but we should know what all are the different option that we can use in "grep"-
1. grep -i "" --> Case-Insensitive Search 
2. grep -o "" --> 
3. grep -v "success" log.txt --> Shows lines **not** containing "success"
4. grep -c "warning" log.txt     # Counts how many lines contain "warning"
5. grep -n "fatal" log.txt       # Displays line numbers with matches
6. grep -r "TODO" /home/user/    # Searches all files recursively in a directory --> Important command u can get this question interview
7. grep -e "error" -e "fail" log.txt   # Searches for "error" **or** "fail"
8. grep -E "error|fail" log.txt  # Same as above, using regex OR (`|`)
9. grep -B 3 "crash" log.txt   # Shows 3 lines **before** each match
10. grep -A 2 "exception" log.txt # Shows 2 lines **after** each match
11. grep -C 1 "panic" log.txt   # Shows 1 line **before and after** each match
12. grep -l "pattern" *.log       # Lists filenames containing "pattern" (not the lines)
13. grep -m 5 "error" log.txt     # Stops after 5 matches

------------awk-------------
1.  Line operations
To print line number - NR
field count - NF
$0 --> will print everything
awk ' {print NR, NF, $0}' example.log

2. to sum partiular column, please use below command
awk '{ sum += $1} END { print sum}' example.log

3. conditional
 awk '{if ($1 > 102) print "High:", $0; else print "Low:", $0}' example.log
here if condition and followed by print statement
else followed by print statement

4. loop

 awk '{for(i=1; i<=NF; i++) print "field", i, ":", $i}' example.log
HERE for 'i' used for doing incremental, when i =1 it will check in the field one 

5. BEGIN and END
awk 'BEGIN {print "start"} {print $0} END {print "end"} '

6. awk '!seen[$0]++' file.txt           # Remove duplicates


-----------sed---------------
sed [options] 'commands' file.txt

1. sed 's/old/new/' file.txt        # Replace 1st 'old' per line with 'new'
sed 's/old/new/g' file.txt       # Replace ALL 'old' with 'new' (global)
sed 's/old/new/2' file.txt       # Replace only the 2nd occurrence per line
sed 's/old/new/i' file.txt       # Case-insensitive replacement
sed 's/old/new/' file.txt        # Replace first 'old' per line
sed -i 's/old/new/g' file.txt    # Edit file directly
sed '/pattern/d' file.txt        # Delete lines with 'pattern'
sed -n '5p' file.txt             # Print line 5
sed '2i\text' file.txt           # Insert before line 2
sed '$a\text' file.txt           # Append at end

---------Process--------
1. view the process
2. Kill process
3. prioratize or deprioratize

